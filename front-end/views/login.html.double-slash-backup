<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-4KNWJP3BH3"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-4KNWJP3BH3');
</script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../css/login.min.css?v=1.0.1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jwt-decode@4.0.0/build/jwt-decode.js"></script>
    <script src="../http.js"></script>
    <style>
        .alert {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            min-width: 300px;
            text-align: center;
        }
    </style>
      <!-- 埋点工具函数 -->
      <script>
        // 埋点工具函数
        window.trackEvent = function(eventName, eventData = {}) {
            try {
                // 构建埋点数据
                const trackData = {
                    event_name: eventName,
                    user_id: 'anonymous',
                    timestamp: new Date().toISOString(),
                    page_url: window.location.href,
                    user_agent: navigator.userAgent,
                    ...eventData
                };
                
                // 发送到后端埋点接口（如果有的话）
                if (typeof axios !== 'undefined') {
                    axios.post('/api/tracking/event', trackData).catch(err => {
                        console.log('埋点发送失败:', err);
                    });
                }
                
                // 控制台输出（开发环境）
                console.log('📊 埋点事件:', eventName, trackData);
                
            } catch (error) {
                console.error('埋点发送失败:', error);
            }
        };
        
        // 页面加载埋点
        document.addEventListener('DOMContentLoaded', function() {
            trackEvent('page_view', {
                page_title: document.title,
                page_type: 'login'
            });
        });
        </script>
</head>
<body>
 <!--turn to sign up-->
 <div class="background">
 <div class="top">
    <div class="header-next">
        <a href="/index" class="header">
            <img loading="lazy" class="logo" src="//images/logo.png" alt="logo">
            <img loading="lazy" class="title" src="//images/title.png" alt="title">
        </a>
    </div>
    <div class="signup">
        <text class="first">还没有账号？</text>
        <a href='/register' class="second">注册</a>
    </div>
 </div>
 <div class="content">
    <div class="cute_image">
        <img loading="lazy" class="logo_2" src="//images/logo_2.png" alt="logo_2">
    </div>
    <div class="square">
        
        <form class="row g-3 needs-validation" novalidate>
            <h3 class="welcome">登录</h3>
            <div class="mb-3">
                <label for="phone" class="form-label">手机号</label>
                <input type="tel" class="form-control" id="phone" placeholder="请输入手机号" required>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">密码</label>
                <input type="password" class="form-control" id="password" placeholder="请输入密码" required>
            </div>
            
            <button type="submit" class="btn btn-primary" >登录</button>
          </form>
    </div>
 </div>

</div>
<div class="alert alert-success" role="alert" style="display:none">
    登录成功
</div>
<div class="alert alert-danger" role="alert" style="display:none">
    登录失败
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const danger = document.querySelector('.alert-danger');
        const forms = document.querySelectorAll('.needs-validation');

        Array.from(forms).forEach(form => {
            form.addEventListener('submit', async (event) => {
                event.preventDefault();
                event.stopPropagation();

                const checkPhone = document.getElementById('phone');
                const checkPass = document.getElementById('password');

                // 手机号不能为空
                if (checkPhone.value.trim() === '') {
                    danger.textContent = '手机号不能为空';
                    danger.style.display = 'block';
                    setTimeout(() => {
                        danger.classList.add('show');
                    }, 10);
                    setTimeout(() => {
                        danger.classList.remove('show');
                        setTimeout(() => {
                            danger.style.display = 'none';
                        }, 300);
                    }, 3000);
                    return;
                }

                if (checkPass.value.trim() === '') {
                    danger.textContent = '密码不能为空';
                    danger.style.display = 'block';
                    setTimeout(() => {
                        danger.classList.add('show');
                    }, 10);
                    setTimeout(() => {
                        danger.classList.remove('show');
                        setTimeout(() => {
                            danger.style.display = 'none';
                        }, 300);
                    }, 3000);
                    return;
                }

                try {
                    // 传给后端
                    const res = await axios.post('/api/user/login', {
                        phone: checkPhone.value.trim(),
                        password: checkPass.value.trim()
                    });
                    
                    console.log('登录成功:', res.data);
                       
                    // 添加埋点
                    trackEvent('user_login', {
                        login_method: 'phone_password',
                        phone: checkPhone.value.trim().substring(0, 3) + '****' + checkPhone.value.trim().substring(7), // 脱敏处理
                        login_success: true
                    });
                    const alertSuccess = document.querySelector('.alert-success');
                    alertSuccess.style.display = 'block';
                    setTimeout(() => {
                        alertSuccess.classList.add('show');
                    }, 10);
                    
                    // 存储token到localStorage
                    const { token } = res.data;
                    localStorage.setItem('eleToken', token);

                    //用户全部信息存储到localStorage里面
                   /* const decode = jwtDecode(token);
                    localStorage.setItem('user_data', JSON.stringify(decode));
                        */
                        try {
                            const payload = JSON.parse(atob(token.split('.')[1]));
                        localStorage.setItem('user_data', JSON.stringify(payload));
                    } catch (error) {
                        console.error('JWT解码失败:', error);
                        // 即使解码失败，也继续登录流程
                        localStorage.setItem('user_data', JSON.stringify({}));
                    }
                    // 调用登录成功函数
                    if (window.loginSuccess) {
                        window.loginSuccess();
                    }

                    setTimeout(() => {
                        alertSuccess.classList.remove('show');
                        setTimeout(() => {
                            window.location.href = '/index';
                        }, 300);
                    }, 3000);
                } catch (error) {
                    console.error('登录失败:', error.response?.data || error.message);
                    danger.textContent = error.response?.data || '登录失败';
                    danger.style.display = 'block';
                    setTimeout(() => {
                        danger.classList.add('show');
                    }, 10);
                    setTimeout(() => {
                        danger.classList.remove('show');
                        setTimeout(() => {
                            danger.style.display = 'none';
                        }, 300);
                    }, 3000);
                }
            });
        });
    });
</script>
</body>
</html>